generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MANAGER
  SUPERVISOR
  LEADER
  STAFF
}

enum RequestStatus {
  PENDING_APPROVAL
  APPROVED_BY_DEPARTMENT
  PENDING_PC
  APPROVED_BY_PC
  REJECTED_BY_DEPARTMENT
  REJECTED_BY_PC
}

enum ApprovalRole {
  LEADER
  SUPERVISOR
  MANAGER
  STAFF
}

enum TokenType {
  REFRESH_TOKEN
  ACCESS_TOKEN
  PASSWORD_RESET
  EMAIL_VERIFICATION
}

enum OtpType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
  TWO_FACTOR_AUTH
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Registration {
  id_registration Int     @id @default(autoincrement())
  id_department   Int
  employee_id     String  @unique
  name            String
  email           String  @unique
  email_verified  Boolean @default(false)
  no_hp           String
  password        String
  role            Role    @default(USER)

  // Data tambahan yang diperlukan perusahaan
  position      String
  division      String?
  hire_date     DateTime?
  work_location String?

  // Status dan metadata
  status           RegistrationStatus @default(PENDING)
  rejection_reason String?
  verified_by      Int?
  verified_at      DateTime?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt

  // Relasi
  department Department @relation(fields: [id_department], references: [id_department])
  verifier   User?      @relation("RegistrationVerifier", fields: [verified_by], references: [id_users])
  users      User?      @relation("UserRegistration")
  otpCodes   OtpCode[]

  @@map("registration")
}

model User {
  id_users        Int       @id @default(autoincrement())
  id_department   Int
  id_registration Int?      @unique
  name            String
  role            Role
  email           String    @unique
  no_hp           String
  password        String
  email_verified  Boolean   @default(false)
  last_login      DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  department    Department      @relation(fields: [id_department], references: [id_department])
  registration  Registration?   @relation("UserRegistration", fields: [id_registration], references: [id_registration])
  requestKanban RequestKanban[]
  persetujuan   Persetujuan[]
  tokens        Token[]
  otpCodes      OtpCode[]
  auditLogs     AuditLog[]

  verifiedRegistrations Registration[] @relation("RegistrationVerifier")

  @@map("users")
}

model Token {
  id         Int       @id @default(autoincrement())
  user_id    Int
  token      String    @unique
  type       TokenType
  expires_at DateTime
  is_revoked Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Metadata untuk tracking
  ip_address String?
  user_agent String?

  user User @relation(fields: [user_id], references: [id_users], onDelete: Cascade)

  @@index([user_id])
  @@index([token])
  @@index([expires_at])
  @@map("tokens")
}

model OtpCode {
  id              Int       @id @default(autoincrement())
  user_id         Int?
  registration_id Int?
  code            String
  type            OtpType
  expires_at      DateTime
  is_used         Boolean   @default(false)
  attempts        Int       @default(0)
  max_attempts    Int       @default(3)
  created_at      DateTime  @default(now())
  used_at         DateTime?

  // Metadata untuk security
  ip_address String?
  user_agent String?

  user         User?         @relation(fields: [user_id], references: [id_users], onDelete: Cascade)
  registration Registration? @relation(fields: [registration_id], references: [id_registration], onDelete: Cascade)

  @@index([user_id])
  @@index([code])
  @@index([expires_at])
  @@map("otp_codes")
}

model Department {
  id_department Int    @id @default(autoincrement())
  name          String

  users         User[]
  requestKanban RequestKanban[]
  persetujuan   Persetujuan[]
  registration  Registration[]

  @@map("department")
}

model RequestKanban {
  id_kanban      Int           @id @default(autoincrement())
  id_users       Int
  id_department  Int
  tgl_produksi   DateTime
  nama_requester String
  parts_number   String
  lokasi         String
  box            String
  klasifikasi    String
  keterangan     String
  status         RequestStatus @default(PENDING_APPROVAL)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  user        User          @relation(fields: [id_users], references: [id_users])
  department  Department    @relation(fields: [id_department], references: [id_department])
  persetujuan Persetujuan[]

  @@map("request_kanban")
}

model Persetujuan {
  id_users      Int
  id_department Int
  id_kanban     Int
  role          ApprovalRole
  approve       Boolean
  approvedAt    DateTime?
  note          String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt

  user          User          @relation(fields: [id_users], references: [id_users])
  department    Department    @relation(fields: [id_department], references: [id_department])
  requestKanban RequestKanban @relation(fields: [id_kanban], references: [id_kanban])

  @@id([id_users, id_department, id_kanban, role])
  @@map("persetujuan")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  action     String // LOGIN, LOGOUT, PASSWORD_RESET, REGISTRATION_APPROVED, etc.
  table_name String? // Nama tabel yang diubah
  record_id  Int? // ID record yang diubah
  old_values Json? // Data lama (untuk UPDATE/DELETE)
  new_values Json? // Data baru (untuk INSERT/UPDATE)
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())

  user User? @relation(fields: [user_id], references: [id_users])

  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@map("audit_logs")
}
